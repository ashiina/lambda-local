#!/usr/bin/env node

'use strict';

/*
 * Local executor for Amazon Lambda function
 */
(function() {

    var logger = require('winston');
    logger.level = 'info';
    logger.configure({
        transports: [
            new (logger.transports.Console)({handleExceptions: true, json: false, colorize: true})
        ]
    });

    var lambdaLocal = require('../lib/lambdalocal.js'),
        utils = require('../lib/utils.js');
    lambdaLocal.setLogger(logger);

    // process opts
    var program = require('commander');
    program
        .option('-l, --lambda-path <lambda index path>', '(required) Lambda function file name.')
        .option('-e, --event-path <path>', '(required) Event data file name.')
        .option('-h, --handler <handler name>',
            '(optional) Lambda function handler name. Default is \'handler\'.')
        .option('-t, --timeout <timeout seconds>',
            '(optional) Seconds until lambda function timeout. Default is 3 seconds.')
        .option('-n, --no-force-callback',
            '(optional) Force the function to stop after having called the handler function' +
            ' even if context.done/succeed/fail was not called.')
        .option('-r, --region <aws region>',
            '(optional) default set to us-east-1')
        .option('-p, --profile <aws profile name>',
            '(optional) Read the AWS profile to get the credentials from profile name')
        .option('-P, --profile-path <aws credentials path>',
            '(optional) Read the specified AWS credentials file')
        .option('-E, --environment <JSON {key:value}>',
            '(optional) Set extra environment variables for the lambda')
        .option('-v, --verboselevel <3/2/1/0>',
            '(optional) Default 3. Level 2 dismiss handler() text, level 1 dismiss lambda-local text ' +
            'and level 0 dismiss also the result.')
        .option('--envfile <path/to/env/file>',
            '(optional) Load additional environment variables from a file')
        .parse(process.argv);
    
    var eventPath = program.eventPath,
        lambdaPath = program.lambdaPath,
        lambdaHandler = program.handler,
        profilePath = program.profilePath,
        profileName = program.profile,
        region = program.region,
        environment = program.environment,
        envfile = program.envfile,
        callbackWaitsForEmptyEventLoop = program.noForceCallback,
        verboseLevel = program.verboselevel;
    
    if (!lambdaPath || !eventPath) {
        program.help();
    }

    // default handler name
    if (!lambdaHandler) {
        lambdaHandler = 'handler';
    }
    
    if (environment) {
        try {
            environment = JSON.parse(environment);
        } catch (e) {
            console.log("Invalid environment variable JSON format. ");
            console.log("Example: {\\\"key\\\":\\\"val\\\"\\\,\\\"key2\\\":\\\"val2\\\"}");
            process.exit();
        }
    } else {
        environment = [];
    }

    //default callbackWaitsForEmptyEventLoop
    if (!callbackWaitsForEmptyEventLoop) {
        callbackWaitsForEmptyEventLoop = false;
    } else {
        callbackWaitsForEmptyEventLoop = true;
    }

    // timeout milliseconds
    var timeoutMs;
    if (program.timeout) {
        timeoutMs = program.timeout * 1000;
    } else {
        timeoutMs = 3000;
    }

    var event = require(utils.getAbsolutePath(eventPath));
    try {
        // execute
        lambdaLocal.execute({
            event: event,
            lambdaPath: lambdaPath,
            lambdaHandler: lambdaHandler,
            profilePath: profilePath,
            profileName: profileName,
            region: region,
            callbackWaitsForEmptyEventLoop: callbackWaitsForEmptyEventLoop,
            timeoutMs: timeoutMs,
            environment: environment,
            envfile: envfile,
            callback: function(err /*, data */) { //data unused
                if (err === null) {
                    logger.log('info', 'lambda-local successfully complete.');
                    process.exit(0);
                } else {
                    logger.log('error', 'lambda-local failed.');
                    // Finish the process
                    process.exit(1);
                }
            },
            verboseLevel: verboseLevel
        });
    } catch (ex) {
        if (ex instanceof utils.TimeoutError) {
            logger.log('error', '-----');
            logger.log('error', 'Task timed out after ' + (timeoutMs / 1000).toFixed(2) + ' seconds');
            process.exit(1);
        }
        logger.log('error', ex);
    }
})();
