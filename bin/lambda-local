#!/usr/bin/env node

/*
 * Local executor for Amazon Lambda function
 */
(function(){
	var utils = require('../lib/utils.js');

	// process opts
	var program = require('commander');
	program
		.option('-l, --lambdapath [lambda file name]', 'Specify Lambda function file name.')
		.option('-e, --eventpath [event data file name]', 'Specify event data file name.')
		.option('-h, --handler [lambda-function handler name (optional)]', 'Lambda function handler name. Default is "handler".')
		.option('-t, --timeout [timeout seconds (optional)]', 'Seconds until lambda function timeout. Default is 3 seconds.')
		.parse(process.argv);

	var eventPath = program.eventpath;
	var lambdaPath = program.lambdapath;
	var lambdaHandler = program.handler;
	if (!lambdaPath || !eventPath) {
		program.help();
	}

	// default handler name
	if (!lambdaHandler) {
		lambdaHandler = "handler";
	}

	// load lambda function
	var lambdaAbsolutePath = utils.getAbsolutePath(lambdaPath);
	var lambdaFunc = require(lambdaAbsolutePath);

	// load event & context
	var eventAbsolutePath = utils.getAbsolutePath(eventPath);
	var _event = require(eventAbsolutePath);
	var _context = require('../lib/context.js');

	var timeoutMs;
	if (program.timeout) {
		timeoutMs = program.timeout * 1000;
	} else {
		timeoutMs = 3000;
	}
	setTimeout(function(){
		console.log("Task timed out after "+(timeoutMs/1000).toFixed(2)+" seconds");
		process.exit();
	}, timeoutMs); 

	// execute lambda function
	console.log("Logs");
	console.log("----");
	console.log("START RequestId: " + _context.invokeid);
	
	_context.invoke(timeoutMs);
	lambdaFunc[lambdaHandler](_event, _context);

})();
