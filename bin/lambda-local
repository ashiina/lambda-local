#!/usr/bin/env node

/*
 * Local executor for Amazon Lambda function
 */
(function(){
	var lambdalocal = require('../lib/lambdalocal.js');

	// process opts
	var program = require('commander');
	program
		.option('-l, --lambdapath [lambda file name]', 'Specify Lambda function file name.')
		.option('-e, --eventpath [event data file name]', 'Specify event data file name.')
		.option('-h, --handler [lambda-function handler name (optional)]', 'Lambda function handler name. Default is "handler".')
		.option('-t, --timeout [timeout seconds (optional)]', 'Seconds until lambda function timeout. Default is 3 seconds.')
		.option('-n, --nocallbackforce (optional)', 'Force the function to stop after having called the handler function even if context.done/succeed/fail was not called.')
		.option('-p, --profile [aws file path (optional)]', 'Read the AWS profile to get the credentials')
		.parse(process.argv);

	var eventPath = program.eventpath;
	var lambdaPath = program.lambdapath;
	var lambdaHandler = program.handler;
	var profilePath = program.profile;
	var callbackWaitsForEmptyEventLoop = program.nocallbackforce;
	if (!lambdaPath || !eventPath) {
		program.help();
	}

	// default handler name
	if (!lambdaHandler) {
		lambdaHandler = "handler";
	}
	
	//default callbackWaitsForEmptyEventLoop
	if(!callbackWaitsForEmptyEventLoop){
		callbackWaitsForEmptyEventLoop = false;
	} else {
		callbackWaitsForEmptyEventLoop = true;
	}

	// timeout milliseconds
	var timeoutMs;
	if (program.timeout) {
		timeoutMs = program.timeout * 1000;
	} else {
		timeoutMs = 3000;
	}

	// execute
	lambdalocal.execute({
		eventPath: eventPath,
		lambdaPath: lambdaPath,
		lambdaHandler: lambdaHandler,
		profilePath: profilePath,
		callbackWaitsForEmptyEventLoop: callbackWaitsForEmptyEventLoop,
		timeoutMs: timeoutMs,
		callback: function (result) {
			console.log("-----");
			if (result == true) {
				console.log("lambda-local successfully complete.");
			} else {
				console.log("lambda-local failed.");
			}
			//Finish the process
			process.exit();
		}
	});

	// handling timeout
	setTimeout(function(){
		console.log("-----");
		console.log("Task timed out after "+(timeoutMs/1000).toFixed(2)+" seconds");
		process.exit();
	}, timeoutMs);

})();
